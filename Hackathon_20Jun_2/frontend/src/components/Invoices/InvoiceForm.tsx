import React, { ReactNode } from 'react';
import { useForm, Controller, useFieldArray, FieldError } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { FiPlus, FiTrash2, FiCalendar, FiUser, FiHash } from 'react-icons/fi';
import { invoiceService } from '../../services/invoiceService';
import { toast } from 'react-hot-toast';
import { useRouter } from 'next/router';
import { Invoice, LineItem } from '../../types';

const invoiceItemSchema = z.object({
  name: z.string().min(1, "Description is required"),
  quantity: z.preprocess((a) => parseInt(z.string().parse(a), 10), z.number().min(1, "Quantity must be at least 1")),
  rate: z.preprocess((a) => parseFloat(z.string().parse(a)), z.number().min(0.01, "Rate must be positive")),
});

const invoiceSchema = z.object({
  customer_name: z.string().min(3, "Customer name is required"),
  invoice_number: z.string().min(1, "Invoice number is required"),
  date: z.date(),
  due_date: z.date(),
  line_items: z.array(invoiceItemSchema).min(1, "At least one item is required"),
  status: z.enum(['paid', 'pending', 'draft'])
});

type InvoiceFormValues = z.infer<typeof invoiceSchema>;

interface InputFieldProps {
    label: string;
    name: string;
    icon: ReactNode;
    error: FieldError | undefined;
    children: ReactNode;
}

const InputField: React.FC<InputFieldProps> = ({ label, icon, error, children }) => (
    <div>
      <label style={{ display: 'block', fontSize: '0.9rem', fontWeight: 600, color: '#4a5568', marginBottom: '0.5rem' }}>
        {icon} {label}
      </label>
      {children}
      {error && <p style={{ color: '#ef4444', fontSize: '0.85rem', marginTop: '0.5rem' }}>{error.message}</p>}
    </div>
);


const InvoiceForm: React.FC = () => {
  const router = useRouter();
  const { register, handleSubmit, control, formState: { errors, isSubmitting }, watch } = useForm<InvoiceFormValues>({
    resolver: zodResolver(invoiceSchema),
    defaultValues: {
      line_items: [{ name: "", quantity: 1, rate: 0 }],
      status: 'draft',
      date: new Date()
    }
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "line_items"
  });

  const items = watch("line_items");

  const calculateTotal = () => {
    return items?.reduce((sum, item) => {
      const quantity = Number(item.quantity) || 0;
      const rate = Number(item.rate) || 0;
      return sum + (quantity * rate);
    }, 0) || 0;
  };

  const onSubmit = async (data: InvoiceFormValues) => {
    const total = calculateTotal();
    const invoiceData: Omit<Invoice, '_id' | 'created_at' | 'updated_at'> = {
        ...data,
        invoice_id: '', // This will be generated by the backend
        date: data.date.toISOString(),
        due_date: data.due_date.toISOString(),
        total: total,
        line_items: data.line_items.map(item => ({...item, item_total: item.quantity * item.rate})),
    };

    const toastId = toast.loading('Creating invoice...');
    try {
      await invoiceService.createInvoice(invoiceData);
      toast.success('Invoice created successfully!', { id: toastId });
      router.push('/invoices/list');
    } catch (error) {
      toast.error('Failed to create invoice.', { id: toastId });
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>
      
      {/* Customer and Invoice Details */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        gap: '1.5rem'
      }}>
        <InputField label="Customer Name" name="customer_name" icon={<FiUser />} error={errors.customer_name}>
          <input {...register("customer_name")} placeholder="e.g. John Doe" className="form-input" />
        </InputField>
        <InputField label="Invoice Number" name="invoice_number" icon={<FiHash />} error={errors.invoice_number}>
          <input {...register("invoice_number")} placeholder="e.g. INV-2024-001" className="form-input" />
        </InputField>
      </div>
      
      {/* Dates */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        gap: '1.5rem'
      }}>
        <InputField label="Issue Date" name="date" icon={<FiCalendar />} error={errors.date}>
          <Controller
            control={control}
            name="date"
            render={({ field }) => (
              <DatePicker
                selected={field.value}
                onChange={field.onChange}
                className="form-input"
                placeholderText="Select issue date"
              />
            )}
          />
        </InputField>
        <InputField label="Due Date" name="due_date" icon={<FiCalendar />} error={errors.due_date}>
          <Controller
            control={control}
            name="due_date"
            render={({ field }) => (
              <DatePicker
                selected={field.value}
                onChange={field.onChange}
                className="form-input"
                placeholderText="Select due date"
              />
            )}
          />
        </InputField>
      </div>

      {/* Invoice Items */}
      <div>
        <h3 style={{ fontSize: '1.25rem', fontWeight: 700, color: '#1a202c', marginBottom: '1rem', borderBottom: '1px solid #e2e8f0', paddingBottom: '0.75rem' }}>
          Invoice Items
        </h3>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
          {fields.map((field, index) => (
            <div key={field.id} style={{
              display: 'grid',
              gridTemplateColumns: '3fr 1fr 1fr auto',
              gap: '1rem',
              alignItems: 'center',
              padding: '1rem',
              borderRadius: '12px',
              background: '#f8fafc'
            }}>
              <input
                {...register(`line_items.${index}.name`)}
                placeholder="Item description"
                className="form-input"
              />
              <input
                {...register(`line_items.${index}.quantity`)}
                type="number"
                placeholder="Quantity"
                className="form-input"
              />
              <input
                {...register(`line_items.${index}.rate`)}
                type="number"
                step="0.01"
                placeholder="Rate"
                className="form-input"
              />
              <button type="button" onClick={() => remove(index)} style={{
                background: 'transparent',
                border: 'none',
                color: '#ef4444',
                cursor: 'pointer',
                padding: '0.5rem'
              }}>
                <FiTrash2 size={18} />
              </button>
            </div>
          ))}
        </div>
        {errors.line_items && <p style={{ color: '#ef4444', fontSize: '0.85rem', marginTop: '0.5rem' }}>{errors.line_items.message}</p>}
        
        <button
          type="button"
          onClick={() => append({ name: "", quantity: 1, rate: 0 })}
          style={{
            marginTop: '1.5rem',
            background: 'rgba(102, 126, 234, 0.1)',
            color: '#5a67d8',
            border: '1px dashed #a3bffa',
            borderRadius: '12px',
            padding: '0.75rem',
            fontWeight: 600,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '0.5rem',
            width: '100%'
          }}
        >
          <FiPlus /> Add Item
        </button>
      </div>

      {/* Total and Actions */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginTop: '2rem',
        paddingTop: '2rem',
        borderTop: '1px solid #e2e8f0'
      }}>
        <div>
          <label style={{display: 'block', color: '#718096'}}>Status</label>
          <select {...register("status")} className="form-input" style={{paddingRight: '2rem'}}>
            <option value="draft">Draft</option>
            <option value="pending">Pending</option>
            <option value="paid">Paid</option>
          </select>
        </div>
        <div style={{ textAlign: 'right' }}>
          <p style={{ color: '#718096', margin: 0, fontSize: '1rem' }}>Total Amount</p>
          <p style={{
            fontSize: '2rem',
            fontWeight: 700,
            color: '#1a202c',
            margin: '0.25rem 0 0 0',
          }}>
            â‚¹{calculateTotal().toLocaleString('en-IN')}
          </p>
        </div>
      </div>
      
      <button 
        type="submit"
        disabled={isSubmitting}
        style={{
          background: `linear-gradient(135deg, #667eea 0%, #764ba2 100%) ${isSubmitting ? 0.5 : 1}`,
          color: 'white',
          padding: '1rem',
          borderRadius: '12px',
          border: 'none',
          fontWeight: 600,
          cursor: isSubmitting ? 'not-allowed' : 'pointer',
          fontSize: '1rem',
          opacity: isSubmitting ? 0.7 : 1
        }}
      >
        {isSubmitting ? 'Creating...' : 'Create Invoice'}
      </button>
      <style jsx>{`
        .form-input {
          width: 100%;
          padding: 0.75rem 1rem;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          font-size: 1rem;
          transition: all 0.2s ease;
          background: #f8fafc;
        }
        .form-input:focus {
          outline: none;
          border-color: #a3bffa;
          box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
          background: white;
        }
        .react-datepicker-wrapper,
        .react-datepicker__input-container {
          width: 100%;
        }
      `}</style>
    </form>
  );
};

export default InvoiceForm;